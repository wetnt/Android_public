package com.boboking.view.columnchart;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.listener.ColumnChartOnValueSelectListener;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Column;
import lecho.lib.hellocharts.model.ColumnChartData;
import lecho.lib.hellocharts.model.SubcolumnValue;
import lecho.lib.hellocharts.util.ChartUtils;
import lecho.lib.hellocharts.view.ColumnChartView;
import android.app.Activity;
import android.graphics.Color;

import com.boboking.tools.d;

public class BBKColumnChartView {

	private ColumnChartView columnChart;
	private ColumnChartData columnData;
	private List<Column> columnBoxList;

	// 初始化数据并显示在图表上
	public void Chart_Init(Activity act, int RecID,//
			int[] data,// 数据
			ColumnChartOnValueSelectListener tl,// 触摸响应
			int[] xKeys, String[] xLable, int[] yKeys, String[] yLable// XY轴的值与标签
	) {
		// --------------------------------------------------------------------------
		Chart_View(act, RecID, tl);
		Chart_XY(xKeys, xLable, yKeys, yLable);
		Chart_Data_Set(data);
		Chart_Data_Flash();
		// --------------------------------------------------------------------------
	}

	public void Chart_View(Activity act, int RecID, ColumnChartOnValueSelectListener tl) {
		columnChart = (ColumnChartView) act.findViewById(RecID);
		columnChart.setValueSelectionEnabled(true);
		columnChart.setZoomType(ZoomType.HORIZONTAL);
		columnChart.setOnValueTouchListener(tl);
	}

	public void Chart_XY(int[] xKeys, String[] xLable, int[] yKeys, String[] yLable) {
		columnData = new ColumnChartData();
		// --------------------------------------------------------------------------
		if (true) {
			// --------------------------------------------------------------------------
			List<AxisValue> xList = new ArrayList<AxisValue>();
			for (int i = 0; i < xKeys.length; ++i) {
				xList.add(new AxisValue(xKeys[i]).setLabel(xLable[i]));
			}
			// --------------------------------------------------------------------------
			Axis axisX = new Axis(xList)//
					// .setHasLines(true)//
					// .setMaxLabelChars(144)//
					// .setName("yName")// 设置Y轴显示名称
					// .setTextSize(14)// 设置文字大小
					.setLineColor(Color.BLACK)// 设置轴线颜色
					.setHasSeparationLine(true)// 设置是否有分割线
					.setTextColor(Color.BLACK);//
			columnData.setAxisXBottom(axisX);
			// --------------------------------------------------------------------------
		}
		// --------------------------------------------------------------------------
		if (true) {
			List<AxisValue> yList = new ArrayList<AxisValue>();
			for (int i = 0; i < yKeys.length; ++i) {
				yList.add(new AxisValue(yKeys[i]).setLabel(yLable[i]));
			}
			Axis axisY = new Axis()//
					.setValues(yList)//
					// .setName("yName")// 设置Y轴显示名称
					// .setTextSize(14)// 设置文字大小
					// .setHasLines(true)//
					// .setTypeface(Typeface.DEFAULT)// 设置文字样式，此处为默认
					// .setInside(true)// 文字是否在轴内部
					// .setMaxLabelChars(20)//
					.setHasTiltedLabels(true)// 设置X轴文字向左旋转45度
					.setHasSeparationLine(true)// 设置是否有分割线
					.setAutoGenerated(false)//
					.setLineColor(Color.BLACK)// 设置Y轴轴线颜色
					.setTextColor(Color.BLACK)//
					.setMaxLabelChars(2);
			// --------------------------------------------------------------------------
			columnData.setAxisYLeft(axisY);
		}
		// --------------------------------------------------------------------------

	}

	// ====================================================================================
	// ####################################################################################
	// ####################################################################################
	// ====================================================================================
	private int chartDataMaxNumber = 60;
	private int chartDataBox[] = { //
	//
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, // 10
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, // 20
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, // 30
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, // 40
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, // 50
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, // 60
	}; // 40

	public void Chart_Data_Set(int[] data) {
		chartDataBox = data;
		chartDataMaxNumber = data.length;
	}

	public void Chart_Data_Clear() {
		for (int i = 0; i < chartDataBox.length; i++) {
			chartDataBox[i] = 0;
		}
	}

	public void Chart_Data_Random_All(int min, int max) {
		for (int i = 0; i < chartDataMaxNumber; i++) {
			chartDataBox[i] = (int) (min + Math.random() * max);
		}
	}

	public void Chart_Data_Change_One(int id, int value) {
		chartDataBox[id] = value;
	}

	// ====================================================================================
	// ####################################################################################
	// ####################################################################################
	// ====================================================================================

	public void Chart_Data_Flash() {
		// --------------------------------------------------------------------------
		int numSubcolumns = 1;
		// --------------------------------------------------------------------------
		columnBoxList = new ArrayList<Column>();
		List<SubcolumnValue> values = null;
		for (int i = 0; i < chartDataMaxNumber; ++i) {
			values = new ArrayList<SubcolumnValue>();
			for (int j = 0; j < numSubcolumns; ++j) {
				values.add(new SubcolumnValue(chartDataBox[i], ChartUtils.COLOR_GREEN));
			}
			// 点击柱状图就展示数据量
			columnBoxList.add(new Column(values).setHasLabelsOnlyForSelected(true));
		}
		// --------------------------------------------------------------------------
		columnData.setColumns(columnBoxList);
		columnChart.setColumnChartData(columnData);
		columnChart.refreshDrawableState();
		// --------------------------------------------------------------------------
		values.clear();
		values = null;
		// --------------------------------------------------------------------------
	}

	// ====================================================================================
	// ####################################################################################
	// ####################################################################################
	// ====================================================================================
	// private final static int[] xNumberLists = new int[] { 0, 18};// X横轴数据
	// private final static String[] xLable = new String[] { "0:0", "3:0"};X横轴数据
	// private final static int[] yNumberLists = new int[] { 1, 4 };Y横轴数据
	// private final static String[] yLable = new String[] { "轻微", "达标"};Y横轴数据
	// ====================================================================================
	// ####################################################################################
	// ####################################################################################
	// ====================================================================================
	public class ValueTouchListener implements ColumnChartOnValueSelectListener {
		@Override
		public void onValueSelected(int columnIndex, int subcolumnIndex, SubcolumnValue value) {
			// generateLineData(value.getColor(), 100);
			d.s(columnIndex + "x" + subcolumnIndex + "=" + value);
		}

		@Override
		public void onValueDeselected() {
			// generateLineData(ChartUtils.COLOR_GREEN, 0);
		}
	}
	// ====================================================================================
	// ####################################################################################
	// ####################################################################################
	// ====================================================================================
}
